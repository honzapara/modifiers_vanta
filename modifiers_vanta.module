<?php

/**
 * @file
 * Vanta Modifier module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Serialization\Yaml;

/**
 * Implements hook_help().
 */
function modifiers_vanta_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.modifiers_vanta':
      $output = '';
      $output .= '<p>';
      $output .= t('Vanta Modifier is a modifier that can allow to apply animated website background to entities (Nodes, Blocks, Paragraphs, Users, etc). Vanta is based on 3rd party library ' . '<a href="https://www.vantajs.com/">Vanta.js.</a>');
      $output .= '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<p>' . t('In order to use Vanta Modifier you need to have <a href="https://www.drupal.org/project/modifiers">Modifiers</a> module enabled. How to set Modifiers can be found in the documentation of the module. </ br> You also need to install Vanta library by composer. See the snippet in the README.') . '</p>';
      $output .= '<p>' . t('Vanta Modifier contains Config field, Type field and Media Query filed.') . '</p>';
      $output .= '<h4>' . t('Type') . '</h4>';
      $output .= '<p>' . t('This field is the type of the effect.') . '</p>';
      $output .= '<h4>' . t('Config') . '</h4>';
      $output .= '<p>' . t('Configuration should be coppied from Vanta.js in YAML without the "el".</ br> Simply go to <a href="https://www.vantajs.com/">https://www.vantajs.com</a>, select the effect and the code should be generated for you.') . '</p>';
      $output .= '<p>' . t('<strong>Example</strong>') . '</p>';
      $output .= '<prev>' . t('mouseControls: true,</ br>
touchControls: true,</ br>
gyroControls: false,</ br>
minHeight: 200.00,</ br>
minWidth: 200.00,</ br>
scale: 1.00,</ br>
scaleMobile: 1.00') . '</prev>';
      $output .= '<h4>' . t('Media Query') . '</h4>';
      $output .= '<p>' . t('This field allows you to specify the view port in which should be the effect triggered. ') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function modifiers_vanta_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (isset($element['#paragraph_type'])
    && $element['#paragraph_type'] == 'vanta_modifier'
    && isset($element['subform']['field_vanta_config'])
  ) {
    // Validate Vanta config YAML format.
    $element['subform']['field_vanta_config']['widget']['#element_validate'][] = '_modifiers_vanta_config_validate';
  }
}

/**
 * Validates Vanta config form value.
 */
function _modifiers_vanta_config_validate(&$element, FormStateInterface $form_state, &$complete_form) {
  $value = $form_state->getValue($element[0]['value']['#parents']);
  if (!empty($value)) {

    // Strip whitespaces and final comma.
    $lines = explode(PHP_EOL, $value);
    array_walk($lines, function (&$value) {
      $value = rtrim(trim($value), ',');
    });
    // Set cleaned value back to form.
    $value = implode(PHP_EOL, $lines);
    $form_state->setValue($element[0]['value']['#parents'], $value);

    // Show error if string is not formatted correctly.
    try {
      Yaml::decode($value);
    }
    catch (\Exception $e) {
      $form_state->setError($element, t('YAML is not formatted correctly: @message', [
        '@message' => $e->getMessage(),
      ]));
    }
  }
}
